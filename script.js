// Generated by CoffeeScript 1.8.0
(function() {
  window.onload = function() {
    var btn, generateOptions, getCurrentPropValue, item, max, min, modifyBoxProperty, processAnimation, selects, settings, _i, _len, _ref;
    btn = document.querySelector('.submit-btn');
    settings = document.querySelector('.settings-form');
    selects = settings.querySelectorAll('select');
    getCurrentPropValue = function(elem, propName) {
      var allValues;
      if (elem.currentStyle != null) {
        allValues = {
          top: elem.currentStyle.top,
          left: elem.currentStyle.left,
          width: elem.offsetWidth,
          height: elem.offsetHeight
        };
        return parseInt(allValues[propName], 10);
      }
      if (window.getComputedStyle != null) {
        return parseInt(window.getComputedStyle(elem, null).getPropertyValue(propName), 10);
      }
      return 0;
    };
    processAnimation = function(elem, propName, propValue, animTime) {
      var currValue, diff, directionFactor, frame, frameDuration;
      if (animTime == null) {
        animTime = 5;
      }
      if (elem.customTimer == null) {
        elem.customTimer = {};
      }
      if (elem.customTimer[propName] != null) {
        clearInterval(elem.customTimer[propName]);
      }
      currValue = getCurrentPropValue(elem, propName);
      diff = Math.abs(currValue - propValue);
      frameDuration = Math.ceil(animTime * 1000 / diff);
      directionFactor = currValue < propValue ? 1 : -1;
      frame = function() {
        if (currValue === propValue) {
          clearInterval(elem.customTimer[propName]);
          return;
        }
        currValue += directionFactor;
        elem.style[propName] = "" + currValue + "px";
      };
      elem.customTimer[propName] = setInterval(frame, frameDuration);
      frame();
    };
    modifyBoxProperty = function(target, doAnimate) {
      var box, propName, propValue;
      box = document.querySelector('#box');
      propName = target.getAttribute('name');
      propValue = parseInt(target.value, 10);
      if (doAnimate) {
        processAnimation(box, propName, propValue);
      } else {
        box.style[propName] = "" + propValue + "px";
      }
    };
    generateOptions = function(min, max) {
      var frag, index, option, out, _i;
      frag = document.createDocumentFragment();
      out = [];
      for (index = _i = min; min <= max ? _i <= max : _i >= max; index = min <= max ? ++_i : --_i) {
        option = document.createElement('option');
        option.value = index;
        option.innerHTML = index;
        frag.appendChild(option);
      }
      return frag;
    };
    for (_i = 0, _len = selects.length; _i < _len; _i++) {
      item = selects[_i];
      _ref = item.dataset.optionRange.split('-'), min = _ref[0], max = _ref[1];
      item.appendChild(generateOptions(min, max));
      modifyBoxProperty(item, false);
    }
    settings.addEventListener('change', function(ev) {
      if (ev.target && ev.target.nodeName.toLowerCase() === 'select') {
        modifyBoxProperty(ev.target, true);
      }
    });
  };

}).call(this);
